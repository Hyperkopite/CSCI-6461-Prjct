0000110100010000     //[1000] LDA R1 0 0 16  //step1-3: int[] inputArray; inputArray's addr=128
0110010111000011     //[1001] SRC R1 1 1 3  //R1=128
0000100100010101     //[1002] STR R1 0 0 21  //memory21=128
0000110100010000     //[1003] LDA R1 0 0 16  //step4-6: def int search addr;
0110010111000100     //[1004] SRC R1 1 1 4  //R1=256
0000100100010110     //[1005] STR R1 0 0 22  //memory22=256
0000110100010000     //[1006] LDA R1 0 0 16  //step7-9: def int[] subArray;
0110010111000101     //[1007] SRC R1 1 1 5  //R1=512
0000100100010111     //[1008] STR R1 0 0 23  //memory23=512
0000111000000000     //[1009] LDA R2 0 0 0  //
0110011011000101     //[1010] SRC R2 1 1 5  //
0001101000011111     //[1011] AIR R2 0 0 31  //
0110011011000101     //[1012] SRC R2 1 1 5  //
0001101000011001     //[1013] AIR R2 0 0 25  //
0000101000011001     //[1014] STR R2 0 0 25  //
1000011100011001     //[1015] LDX X3 0 0 25  //X3=memory[25]=z+y*32+x*32*32=1017
0000110000010100     //[1016] LDA R0 0 0 20  //
0000100000011000     //[1017] STR R0 0 0 24  //memory24=R0
0000010100010101     //[1018] LDR R1 0 0 21  //R1=128
0001000100011000     //[1019] AMR R1 0 0 24  //R1=128+R0
0000100100011001     //[1020] STR R1 0 0 25  //memory25=128+R0
1000010100011001     //[1021] LDX X1 0 0 25  //X1=memory25=128+R0
0000010100010111     //[1022] LDR R1 0 0 23  //R1=512
0001000100011000     //[1023] AMR R1 0 0 24  //R1=512+R0
0000100100011001     //[1024] STR R1 0 0 25  //memory25=512+R0
1000011000011001     //[1025] LDX X2 0 0 25  //X2=memory25=512+R0
0000010100110110     //[1026] LDR R1 0 1 22  //R1=search
0001010101000000     //[1027] SMR R1 X1 0 0  //R1=search-c(x1)=search-inputArray[R0]
0000111000000001     //[1028] LDA R2 0 0 x  //
0110011011000101     //[1029] SRC R2 1 1 5  //
0001101000000000     //[1030] AIR R2 0 0 y  //
0110011011000101     //[1031] SRC R2 1 1 5  //
0001101000001110     //[1032] AIR R2 0 0 z  //
0000101000011001     //[1033] STR R2 0 0 25  //
1000010100011001     //[1034] LDX X1 0 0 25  //x1=memory[25]=z+y*32+x*32*32=1038
0011110101000000     //[1035] JGE R1 X1 0 0  //if r1>=0 jump
0101010100000000     //[1036] NOT R1 0 0 0  //
0001100100000001     //[1037] AIR R1 0 0 1  //change R1=-R1
0000100110000000     //[1038] STR R1 X2 0 0  //subArray[X2]=subArray[512+R0]=R1=search-inputArray[R0]
0011100011000000     //[1039] SOB R0 X3 0 0  //if R0<0 out or return to 19
0000111000000001     //[1040] LDA R2 0 0 1  //
0110011011000101     //[1041] SRC R2 1 1 5  //
0001101000000000     //[1042] AIR R2 0 0 0  //
0110011011000101     //[1043] SRC R2 1 1 5  //
0001101000011110     //[1044] AIR R2 0 0 30  //
0000101000011001     //[1045] STR R2 0 0 25  //
1000011100011001     //[1046] LDX X3 0 0 25  //X3=memory[25]=z+y*32+x*32*32=1054
1000010100010111     //[1047] LDX X1 0 0 23  //x1=memory23=512
0000010101010100     //[1048] LDR R1 X1 0 20  //R1=subArray[20]
0000100100110110     //[1049] STR R1 0 1 22  //memory[memory22]=memory[256]=R1
1000010100010101     //[1050] LDX X1 0 0 21  //x1=memory23=128
0000010001010100     //[1051] LDR R0 X1 0 20  //R0=inputArray[20]
0000100000011011     //[1052] STR R0 0 0 27  //memory[27]=R0
0000110000010011     //[1053] LDA R0 0 0 19  //
0000010100110110     //[1054] LDR R1 0 1 22  //
0000100000011000     //[1055] STR R0 0 0 24  //memory24=R0
0000011000010111     //[1056] LDR R2 0 0 23  //R2=512    （4stepa: find sub[R0] address)
0001001000011000     //[1057] AMR R2 0 0 24  //R2=512+R0
0000101000011001     //[1058] STR R2 0 0 25  //memory25=512+R0
1000010100011001     //[1059] LDX X1 0 0 25  //X1=memory25=512+R0
0001010101000000     //[1060] SMR R1 X1 0 0  //R1=R1-subArray[x1]
0000111000000001     //[1061] LDA R2 0 0 1  //
0110011011000101     //[1062] SRC R2 1 1 5  //
0001101000000001     //[1063] AIR R2 0 0 1  //
0110011011000101     //[1064] SRC R2 1 1 5  //
0001101000001110     //[1065] AIR R2 0 0 14  //
0000101000011001     //[1066] STR R2 0 0 25  //
1000011000011001     //[1067] LDX X2 0 0 25  //X2=memory[25]=z+y*32+x*32*32=1070
0011110110000000     //[1068] JGE R1 X2 0 0  //jump 1070
0010110010001000     //[1069] JMA 0 X2 0 8  //jump 1070+8=1078
0000010101000000     //[1070] LDR R1 X1 0 0  //
0000100100110110     //[1071] STR R1 0 1 22  //
0000011000010101     //[1072] LDR R2 0 0 21  //R2=128    （4stepa: find input[R0] address)
0001001000011000     //[1073] AMR R2 0 0 24  //R2=128+R0
0000101000011001     //[1074] STR R2 0 0 25  //memory25=128+R0
1000010100011001     //[1075] LDX X1 0 0 25  //X1=memory25=128+R0
0000011001000000     //[1076] LDR R2 X1 0 0  //R2=input[r0]
0000101000011011     //[1077] STR R2 0 0 27  //memory[27]=input[r0]
0011100011000000     //[1078] SOB R0 X3 0 0  //
