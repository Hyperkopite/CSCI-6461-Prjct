LDA R1 0 0 16      //step1-3: int[] inputArray; inputArray's addr=128
SRC R1 1 1 3        //R1=128
STR R1 0 0 21       //memory21=128
LDA R1 0 0 16       //step4-6: def int search addr;
SRC R1 1 1 4        //R1=256
STR R1 0 0 22       //memory22=256
LDA R1 0 0 16      //step7-9: def int[] subArray;
SRC R1 1 1 5      //R1=512
STR R1 0 0 23     //memory23=512
LDA R2 0 0 0
SRC R2 1 1 5
AIR R2 0 0 31
SRC R2 1 1 5
AIR R2 0 0 26
STR R2 0 0 25
LDX X3 0 0 25      //X3=memory[25]=z+y*32+x*32*32=1018
LDA R0 0 0 20
STR R0 0 0 24     //memory24=R0
LDR R1 0 0 21     //R1=128
AMR R1 0 0 24     //R1=128+R0
STR R1 0 0 25      //memory25=128+R0
LDX X1 0 0 25      //X1=memory25=128+R0
LDR R1 0 0 23     //R1=512
AMR R1 0 0 24     //R1=512+R0
STR R1 0 0 25     //memory25=512+R0
LDX X2 0 0 25      //X2=memory25=512+R0
LDR R1 0 1 22     //R1=search
SMR R1 X1 0 0     //R1=search-c(x1)=search-inputArray[R0]
LDA R2 0 0 1
SRC R2 1 1 5
AIR R2 0 0 0
SRC R2 1 1 5
AIR R2 0 0 15
STR R2 0 0 25
LDX X1 0 0 25   //x1=memory[25]=z+y*32+x*32*32=1039
JGE R1 X1 0 0   //if r1>=0 jump
NOT R1 0 0 0   //
AIR R1 0 0 1   //change R1=-R1
STR R1 X2 0 0   //subArray[X2]=subArray[512+R0]=R1=search-inputArray[R0]
SOB R0 X3 0 0   //if R0<0 out or return to 19
LDA R2 0 0 1
SRC R2 1 1 5
AIR R2 0 0 0
SRC R2 1 1 5
AIR R2 0 0 28
STR R2 0 0 25
LDX X3 0 0 25   //X3=memory[25]=z+y*32+x*32*32=1052
LDX X1 0 0 23  //x1=memory23=512
LDR R1 X1 0 20 //R1=subArray[20]
STR R1 0 1 22  //memory[memory22]=memory[256]=R1
LDA R0 0 0 19
LDR R1 0 1 22
LDR R2 0 0 23  //R2=512
STR R0 0 0 24     //memory24=R0
AMR R2 0 0 24  //R2=512+R0
STR R2 0 0 25  //memory25=512+R0
LDX X1 0 0 25   //X1=memory25=512+R0
SMR R1 X1 0 0   //R1=R1-subArray[x1]
LDA R2 0 0 1
SRC R2 1 1 5
AIR R2 0 0 1
SRC R2 1 1 5
AIR R2 0 0 12
STR R2 0 0 25
LDX X2 0 0 25   //X2=memory[25]=z+y*32+x*32*32=1068
JGE R1 X2 0 0  //jump 1068
JMA 0 X2 0 2  //jump 1068+2=1070
LDR R1 X1 0 0
STR R1 0 1 22
SOB R0 X3 0 0